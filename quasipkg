#!/usr/bin/env python3
"""
quasipkg - A utility to create dummy/placeholder packages for pacman

This script allows creating empty packages that satisfy dependencies
without installing the actual software.
"""

import argparse
import os
import subprocess
import sys
import shutil
from datetime import datetime
from pathlib import Path


class QuasiPackageCreator:
    """Creates dummy/placeholder packages for pacman"""

    def __init__(self):
        self.args = self._parse_arguments()

    def _parse_arguments(self):
        """Parse command line arguments"""
        parser = argparse.ArgumentParser(
            description='Create dummy/placeholder packages for pacman',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog='''
Examples:
  quasipkg --name cc --version 1.0 --description "Fake cc package" --provides cc
  quasipkg --name cmake --provides cmake --conflicts cmake --install
''')

        parser.add_argument('--name', required=True, help='Package name (required)')
        parser.add_argument('--version', default='1.0', help='Package version (default: 1.0)')
        parser.add_argument('--release', default='1', help='Package release number (default: 1)')
        parser.add_argument('--description', default='Dummy placeholder package',
                            help='Package description')
        parser.add_argument('--provides', help='Package names this dummy provides (comma-separated)')
        parser.add_argument('--conflicts', help='Package names this dummy conflicts with (comma-separated)')
        parser.add_argument('--arch', default='any', help='Package architecture (default: any)')
        parser.add_argument('--license', default='GPL', help='Package license (default: GPL)')
        parser.add_argument('--url', default='https://example.com', help='Package URL')
        parser.add_argument('--output-dir', help='Directory to create package in (default: ./NAME)')
        parser.add_argument('--install', action='store_true', help='Also install the package after building')

        return parser.parse_args()

    def _format_array(self, items_str):
        """Format a comma-separated string into a PKGBUILD array format"""
        if not items_str:
            return ""
        
        items = [f"'{item.strip()}'" for item in items_str.split(',')]
        return ' '.join(items)

    def create_pkgbuild(self):
        """Create PKGBUILD file for the dummy package"""
        # Set up package name and paths
        pkg_name = self.args.name
        pkg_name_dummy = f"{pkg_name}"
        
        # Set default output directory if not specified
        output_dir = self.args.output_dir or pkg_name_dummy
        output_path = Path(output_dir)
        
        # Create output directory
        output_path.mkdir(exist_ok=True, parents=True)
        
        # Set default provides/conflicts if not specified
        provides = self.args.provides or pkg_name
        conflicts = self.args.conflicts or pkg_name
        
        # Format for PKGBUILD
        provides_array = self._format_array(provides)
        conflicts_array = self._format_array(conflicts)
        
        # Create PKGBUILD content
        pkgbuild_content = f"""# Generated by quasipkg
# Maintainer: quasipkg <quasipkg@example.com>

pkgname={pkg_name_dummy}
pkgver={self.args.version}
pkgrel={self.args.release}
pkgdesc="{self.args.description}"
arch=('{self.args.arch}')
url="{self.args.url}"
license=('{self.args.license}')
provides=({provides_array})
conflicts=({conflicts_array})

package() {{
  # Create empty directory structure
  mkdir -p "${{pkgdir}}/usr/share/doc/${{pkgname}}"
  
  # Create a README file explaining this is a dummy package
  cat > "${{pkgdir}}/usr/share/doc/${{pkgname}}/README" << EOL
This is a dummy package that provides '{provides}' without installing the actual software.
Generated by quasipkg on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.
EOL
}}
"""
        
        # Write PKGBUILD file
        pkgbuild_path = output_path / "PKGBUILD"
        with open(pkgbuild_path, 'w') as f:
            f.write(pkgbuild_content)
            
        print(f"Created PKGBUILD in {output_path}/")
        return output_path

    def build_package(self, output_path):
        """Build the package using makepkg"""
        print("Building package...")
        
        try:
            # Change to the output directory
            current_dir = os.getcwd()
            os.chdir(output_path)
            
            # Run makepkg
            subprocess.run(["makepkg-xwin", "-f"], check=True)
            
            # Install if requested
            if self.args.install:
                print("Installing package...")
                # Find the built package
                pkg_files = list(Path('.').glob('*.pkg.tar.zst'))
                if not pkg_files:
                    pkg_files = list(Path('.').glob('*.pkg.tar.xz'))
                
                if not pkg_files:
                    print("Error: Could not find built package file", file=sys.stderr)
                    return False
                    
                # Install the package
                subprocess.run(["sudo", "pacman", "-U", str(pkg_files[0]), "--noconfirm"], check=True)
                
            os.chdir(current_dir)
            print("Done.")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"Error: Command failed with exit code {e.returncode}", file=sys.stderr)
            os.chdir(current_dir)
            return False
        except Exception as e:
            print(f"Error: {str(e)}", file=sys.stderr)
            os.chdir(current_dir)
            return False


def main():
    """Main function"""
    creator = QuasiPackageCreator()
    output_path = creator.create_pkgbuild()
    creator.build_package(output_path)


if __name__ == "__main__":
    main()
