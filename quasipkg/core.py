"""
Core functionality for creating dummy packages.
"""

import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path


class QuasiPackageCreator:
    """Creates dummy/placeholder packages for pacman"""

    def __init__(self, args=None, **kwargs):
        """
        Initialize with either parsed arguments or individual parameters

        Args:
            args: Argument object from argparse (optional)
            **kwargs: Individual parameters (used if args is None)
        """
        if args is not None:
            self.name = args.name
            self.pkgversion = args.pkgversion
            self.release = args.release
            self.description = args.description
            self.provides = args.provides
            self.conflicts = args.conflicts
            self.arch = args.arch
            self.license = args.license
            self.url = args.url
            self.output_dir = args.output_dir
            self.install = args.install
        else:
            self.name = kwargs.get('name')
            self.pkgversion = kwargs.get('version', '1.0')
            self.release = kwargs.get('release', '1')
            self.description = kwargs.get('description', 'Dummy placeholder package')
            self.provides = kwargs.get('provides')
            self.conflicts = kwargs.get('conflicts')
            self.arch = kwargs.get('arch', 'any')
            self.license = kwargs.get('license', 'GPL')
            self.url = kwargs.get('url', 'https://example.com')
            self.output_dir = kwargs.get('output_dir')
            self.install = kwargs.get('install', False)

    def _format_array(self, items_str):
        """Format a comma-separated string into a PKGBUILD array format"""
        if not items_str:
            return ""

        items = [f"'{item.strip()}'" for item in items_str.split(',')]
        return ' '.join(items)

    def create_pkgbuild(self):
        """Create PKGBUILD file for the dummy package"""
        # Set up package name and paths
        pkg_name = self.name
        pkg_name_dummy = f"{pkg_name}"

        # Set default output directory if not specified
        output_dir = self.output_dir or pkg_name_dummy
        output_path = Path(output_dir)

        # Create output directory
        output_path.mkdir(exist_ok=True, parents=True)

        # Set default provides/conflicts if not specified
        provides = self.provides or pkg_name
        conflicts = self.conflicts or pkg_name

        # Format for PKGBUILD
        provides_array = self._format_array(provides)
        conflicts_array = self._format_array(conflicts)

        # Create PKGBUILD content
        pkgbuild_content = f"""# Generated by quasipkg
# Maintainer: quasipkg <quasipkg@example.com>

pkgname={pkg_name_dummy}
pkgver={self.pkgversion}
pkgrel={self.release}
pkgdesc="{self.description}"
arch=('{self.arch}')
url="{self.url}"
license=('{self.license}')
provides=({provides_array})
conflicts=({conflicts_array})

package() {{
  # Create empty directory structure
  mkdir -p "${{pkgdir}}/usr/share/doc/${{pkgname}}"

  # Create a README file explaining this is a dummy package
  cat > "${{pkgdir}}/usr/share/doc/${{pkgname}}/README" << EOL
This is a dummy package that provides '{provides}' without installing the actual software.
Generated by quasipkg on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.
EOL
}}
"""

        # Write PKGBUILD file
        pkgbuild_path = output_path / "PKGBUILD"
        with open(pkgbuild_path, 'w') as f:
            f.write(pkgbuild_content)

        print(f"Created PKGBUILD in {output_path}/")
        return output_path

    def build_package(self, output_path):
        """Build the package using makepkg"""
        print("Building package...")

        try:
            # Change to the output directory
            current_dir = os.getcwd()
            os.chdir(output_path)

            # Run makepkg - use makepkg-xwin if available, otherwise fallback to makepkg
            try:
                subprocess.run(["makepkg-xwin", "-f"], check=True)
            except FileNotFoundError:
                # Fallback to standard makepkg if makepkg-xwin is not available
                subprocess.run(["makepkg", "-f"], check=True)

            # Install if requested
            if self.install:
                print("Installing package...")
                # Find the built package
                pkg_files = list(Path('.').glob('*.pkg.tar.zst'))
                if not pkg_files:
                    pkg_files = list(Path('.').glob('*.pkg.tar.xz'))

                if not pkg_files:
                    print("Error: Could not find built package file", file=sys.stderr)
                    return False

                # Install the package
                subprocess.run(["sudo", "pacman", "-U", str(pkg_files[0]), "--noconfirm"], check=True)

            os.chdir(current_dir)
            print("Done.")
            return True

        except subprocess.CalledProcessError as e:
            print(f"Error: Command failed with exit code {e.returncode}", file=sys.stderr)
            os.chdir(current_dir)
            return False
        except Exception as e:
            print(f"Error: {str(e)}", file=sys.stderr)
            os.chdir(current_dir)
            return False


def create_package(name, version="1.0", release="1", description="Dummy placeholder package",
                provides=None, conflicts=None, arch="any", license="GPL",
                url="https://example.com", output_dir=None, install=False):
    """
    Create a dummy package with the given parameters.

    Args:
        name (str): Package name
        version (str, optional): Package version. Defaults to "1.0".
        release (str, optional): Package release number. Defaults to "1".
        description (str, optional): Package description. Defaults to "Dummy placeholder package".
        provides (str, optional): Package names this dummy provides (comma-separated). Defaults to name.
        conflicts (str, optional): Package names this dummy conflicts with (comma-separated). Defaults to name.
        arch (str, optional): Package architecture. Defaults to "any".
        license (str, optional): Package license. Defaults to "GPL".
        url (str, optional): Package URL. Defaults to "https://example.com".
        output_dir (str, optional): Directory to create package in. Defaults to ./NAME.
        install (bool, optional): Also install the package after building. Defaults to False.

    Returns:
        Path: Path to the created package directory
        bool: True if the package was built successfully, False otherwise
    """
    # Create and build the package - pass parameters directly
    creator = QuasiPackageCreator(
        name=name,
        version=version,
        release=release,
        description=description,
        provides=provides,
        conflicts=conflicts,
        arch=arch,
        license=license,
        url=url,
        output_dir=output_dir,
        install=install
    )

    output_path = creator.create_pkgbuild()
    success = creator.build_package(output_path)

    return output_path, success
